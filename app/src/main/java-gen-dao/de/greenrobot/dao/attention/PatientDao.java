package de.greenrobot.dao.attention;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.dao.attention.Patient;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENT".
*/
public class PatientDao extends AbstractDao<Patient, String> {

    public static final String TABLENAME = "PATIENT";

    /**
     * Properties of entity Patient.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PatientId = new Property(0, String.class, "patientId", true, "PATIENT_ID");
        public final static Property ComfirmTime = new Property(1, Long.class, "comfirmTime", false, "COMFIRM_TIME");
        public final static Property Birthday = new Property(2, Long.class, "birthday", false, "BIRTHDAY");
        public final static Property DiseaseId = new Property(3, Long.class, "diseaseId", false, "DISEASE_ID");
        public final static Property Relation = new Property(4, Integer.class, "relation", false, "RELATION");
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property MedicineNum = new Property(7, Integer.class, "medicineNum", false, "MEDICINE_NUM");
        public final static Property DiseaseName = new Property(8, String.class, "diseaseName", false, "DISEASE_NAME");
        public final static Property UserId = new Property(9, String.class, "userId", false, "USER_ID");
        public final static Property Avatar = new Property(10, String.class, "avatar", false, "AVATAR");
        public final static Property IsActive = new Property(11, Boolean.class, "isActive", false, "IS_ACTIVE");
    };


    public PatientDao(DaoConfig config) {
        super(config);
    }
    
    public PatientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENT\" (" + //
                "\"PATIENT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: patientId
                "\"COMFIRM_TIME\" INTEGER," + // 1: comfirmTime
                "\"BIRTHDAY\" INTEGER," + // 2: birthday
                "\"DISEASE_ID\" INTEGER," + // 3: diseaseId
                "\"RELATION\" INTEGER," + // 4: relation
                "\"GENDER\" INTEGER," + // 5: gender
                "\"STATUS\" INTEGER," + // 6: status
                "\"MEDICINE_NUM\" INTEGER," + // 7: medicineNum
                "\"DISEASE_NAME\" TEXT," + // 8: diseaseName
                "\"USER_ID\" TEXT," + // 9: userId
                "\"AVATAR\" TEXT," + // 10: avatar
                "\"IS_ACTIVE\" INTEGER);"); // 11: isActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Patient entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPatientId());
 
        Long comfirmTime = entity.getComfirmTime();
        if (comfirmTime != null) {
            stmt.bindLong(2, comfirmTime);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(3, birthday);
        }
 
        Long diseaseId = entity.getDiseaseId();
        if (diseaseId != null) {
            stmt.bindLong(4, diseaseId);
        }
 
        Integer relation = entity.getRelation();
        if (relation != null) {
            stmt.bindLong(5, relation);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        Integer medicineNum = entity.getMedicineNum();
        if (medicineNum != null) {
            stmt.bindLong(8, medicineNum);
        }
 
        String diseaseName = entity.getDiseaseName();
        if (diseaseName != null) {
            stmt.bindString(9, diseaseName);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(11, avatar);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(12, isActive ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Patient readEntity(Cursor cursor, int offset) {
        Patient entity = new Patient( //
            cursor.getString(offset + 0), // patientId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // comfirmTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // birthday
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // diseaseId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // relation
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // medicineNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // diseaseName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // avatar
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // isActive
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Patient entity, int offset) {
        entity.setPatientId(cursor.getString(offset + 0));
        entity.setComfirmTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBirthday(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDiseaseId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setRelation(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMedicineNum(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDiseaseName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAvatar(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsActive(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Patient entity, long rowId) {
        return entity.getPatientId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Patient entity) {
        if(entity != null) {
            return entity.getPatientId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
