package de.greenrobot.dao.attention;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.dao.attention.RecordIndex;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_INDEX".
*/
public class RecordIndexDao extends AbstractDao<RecordIndex, Long> {

    public static final String TABLENAME = "RECORD_INDEX";

    /**
     * Properties of entity RecordIndex.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property IndexItemRecordId = new Property(1, long.class, "indexItemRecordId", false, "INDEX_ITEM_RECORD_ID");
        public final static Property PatientId = new Property(2, String.class, "patientId", false, "PATIENT_ID");
        public final static Property IndexName = new Property(3, String.class, "indexName", false, "INDEX_NAME");
        public final static Property IndexId = new Property(4, long.class, "indexId", false, "INDEX_ID");
        public final static Property NormalMin = new Property(5, Float.class, "normalMin", false, "NORMAL_MIN");
        public final static Property NormalMax = new Property(6, Float.class, "normalMax", false, "NORMAL_MAX");
        public final static Property Time = new Property(7, long.class, "time", false, "TIME");
        public final static Property Status = new Property(8, int.class, "status", false, "STATUS");
        public final static Property Value = new Property(9, String.class, "value", false, "VALUE");
        public final static Property UnitName = new Property(10, String.class, "unitName", false, "UNIT_NAME");
        public final static Property IsActive = new Property(11, boolean.class, "isActive", false, "IS_ACTIVE");
    };


    public RecordIndexDao(DaoConfig config) {
        super(config);
    }
    
    public RecordIndexDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_INDEX\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"INDEX_ITEM_RECORD_ID\" INTEGER NOT NULL ," + // 1: indexItemRecordId
                "\"PATIENT_ID\" TEXT NOT NULL ," + // 2: patientId
                "\"INDEX_NAME\" TEXT NOT NULL ," + // 3: indexName
                "\"INDEX_ID\" INTEGER NOT NULL ," + // 4: indexId
                "\"NORMAL_MIN\" REAL," + // 5: normalMin
                "\"NORMAL_MAX\" REAL," + // 6: normalMax
                "\"TIME\" INTEGER NOT NULL ," + // 7: time
                "\"STATUS\" INTEGER NOT NULL ," + // 8: status
                "\"VALUE\" TEXT NOT NULL ," + // 9: value
                "\"UNIT_NAME\" TEXT," + // 10: unitName
                "\"IS_ACTIVE\" INTEGER NOT NULL );"); // 11: isActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_INDEX\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecordIndex entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getIndexItemRecordId());
        stmt.bindString(3, entity.getPatientId());
        stmt.bindString(4, entity.getIndexName());
        stmt.bindLong(5, entity.getIndexId());
 
        Float normalMin = entity.getNormalMin();
        if (normalMin != null) {
            stmt.bindDouble(6, normalMin);
        }
 
        Float normalMax = entity.getNormalMax();
        if (normalMax != null) {
            stmt.bindDouble(7, normalMax);
        }
        stmt.bindLong(8, entity.getTime());
        stmt.bindLong(9, entity.getStatus());
        stmt.bindString(10, entity.getValue());
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(11, unitName);
        }
        stmt.bindLong(12, entity.getIsActive() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecordIndex readEntity(Cursor cursor, int offset) {
        RecordIndex entity = new RecordIndex( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // indexItemRecordId
            cursor.getString(offset + 2), // patientId
            cursor.getString(offset + 3), // indexName
            cursor.getLong(offset + 4), // indexId
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // normalMin
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // normalMax
            cursor.getLong(offset + 7), // time
            cursor.getInt(offset + 8), // status
            cursor.getString(offset + 9), // value
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // unitName
            cursor.getShort(offset + 11) != 0 // isActive
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecordIndex entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setIndexItemRecordId(cursor.getLong(offset + 1));
        entity.setPatientId(cursor.getString(offset + 2));
        entity.setIndexName(cursor.getString(offset + 3));
        entity.setIndexId(cursor.getLong(offset + 4));
        entity.setNormalMin(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setNormalMax(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setTime(cursor.getLong(offset + 7));
        entity.setStatus(cursor.getInt(offset + 8));
        entity.setValue(cursor.getString(offset + 9));
        entity.setUnitName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsActive(cursor.getShort(offset + 11) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RecordIndex entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RecordIndex entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
