package de.greenrobot.dao.attention;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.dao.attention.Chemotherapy;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHEMOTHERAPY".
*/
public class ChemotherapyDao extends AbstractDao<Chemotherapy, Long> {

    public static final String TABLENAME = "CHEMOTHERAPY";

    /**
     * Properties of entity Chemotherapy.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property StartTime = new Property(1, Long.class, "startTime", false, "START_TIME");
        public final static Property Status = new Property(2, Integer.class, "status", false, "STATUS");
        public final static Property ChemotherapyAim = new Property(3, Integer.class, "chemotherapyAim", false, "CHEMOTHERAPY_AIM");
        public final static Property WeeksCount = new Property(4, Integer.class, "weeksCount", false, "WEEKS_COUNT");
        public final static Property NotesType = new Property(5, Integer.class, "notesType", false, "NOTES_TYPE");
        public final static Property Times = new Property(6, Integer.class, "times", false, "TIMES");
        public final static Property Notes = new Property(7, String.class, "notes", false, "NOTES");
        public final static Property DoctorName = new Property(8, String.class, "doctorName", false, "DOCTOR_NAME");
        public final static Property PatientId = new Property(9, String.class, "patientId", false, "PATIENT_ID");
        public final static Property IsActive = new Property(10, Boolean.class, "isActive", false, "IS_ACTIVE");
    };


    public ChemotherapyDao(DaoConfig config) {
        super(config);
    }
    
    public ChemotherapyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHEMOTHERAPY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"START_TIME\" INTEGER," + // 1: startTime
                "\"STATUS\" INTEGER," + // 2: status
                "\"CHEMOTHERAPY_AIM\" INTEGER," + // 3: chemotherapyAim
                "\"WEEKS_COUNT\" INTEGER," + // 4: weeksCount
                "\"NOTES_TYPE\" INTEGER," + // 5: notesType
                "\"TIMES\" INTEGER," + // 6: times
                "\"NOTES\" TEXT," + // 7: notes
                "\"DOCTOR_NAME\" TEXT," + // 8: doctorName
                "\"PATIENT_ID\" TEXT," + // 9: patientId
                "\"IS_ACTIVE\" INTEGER);"); // 10: isActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHEMOTHERAPY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Chemotherapy entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(2, startTime);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        Integer chemotherapyAim = entity.getChemotherapyAim();
        if (chemotherapyAim != null) {
            stmt.bindLong(4, chemotherapyAim);
        }
 
        Integer weeksCount = entity.getWeeksCount();
        if (weeksCount != null) {
            stmt.bindLong(5, weeksCount);
        }
 
        Integer notesType = entity.getNotesType();
        if (notesType != null) {
            stmt.bindLong(6, notesType);
        }
 
        Integer times = entity.getTimes();
        if (times != null) {
            stmt.bindLong(7, times);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(8, notes);
        }
 
        String doctorName = entity.getDoctorName();
        if (doctorName != null) {
            stmt.bindString(9, doctorName);
        }
 
        String patientId = entity.getPatientId();
        if (patientId != null) {
            stmt.bindString(10, patientId);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(11, isActive ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Chemotherapy readEntity(Cursor cursor, int offset) {
        Chemotherapy entity = new Chemotherapy( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // startTime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // chemotherapyAim
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // weeksCount
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // notesType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // times
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // notes
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // doctorName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // patientId
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // isActive
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Chemotherapy entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setChemotherapyAim(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setWeeksCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNotesType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTimes(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setNotes(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDoctorName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPatientId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsActive(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Chemotherapy entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Chemotherapy entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
