package de.greenrobot.dao.attention;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.dao.attention.SurgeryMethods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURGERY_METHODS".
*/
public class SurgeryMethodsDao extends AbstractDao<SurgeryMethods, Long> {

    public static final String TABLENAME = "SURGERY_METHODS";

    /**
     * Properties of entity SurgeryMethods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SurgeryMethodName = new Property(1, String.class, "surgeryMethodName", false, "SURGERY_METHOD_NAME");
        public final static Property SurgeryMethodId = new Property(2, Long.class, "surgeryMethodId", false, "SURGERY_METHOD_ID");
        public final static Property SurgeryRecordId = new Property(3, Long.class, "surgeryRecordId", false, "SURGERY_RECORD_ID");
    };


    public SurgeryMethodsDao(DaoConfig config) {
        super(config);
    }
    
    public SurgeryMethodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURGERY_METHODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SURGERY_METHOD_NAME\" TEXT," + // 1: surgeryMethodName
                "\"SURGERY_METHOD_ID\" INTEGER," + // 2: surgeryMethodId
                "\"SURGERY_RECORD_ID\" INTEGER);"); // 3: surgeryRecordId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURGERY_METHODS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SurgeryMethods entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String surgeryMethodName = entity.getSurgeryMethodName();
        if (surgeryMethodName != null) {
            stmt.bindString(2, surgeryMethodName);
        }
 
        Long surgeryMethodId = entity.getSurgeryMethodId();
        if (surgeryMethodId != null) {
            stmt.bindLong(3, surgeryMethodId);
        }
 
        Long surgeryRecordId = entity.getSurgeryRecordId();
        if (surgeryRecordId != null) {
            stmt.bindLong(4, surgeryRecordId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SurgeryMethods readEntity(Cursor cursor, int offset) {
        SurgeryMethods entity = new SurgeryMethods( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // surgeryMethodName
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // surgeryMethodId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // surgeryRecordId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SurgeryMethods entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSurgeryMethodName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSurgeryMethodId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSurgeryRecordId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SurgeryMethods entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SurgeryMethods entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
