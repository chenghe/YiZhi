package de.greenrobot.dao.attention;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.dao.attention.ChemotherapyCourse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHEMOTHERAPY_COURSE".
*/
public class ChemotherapyCourseDao extends AbstractDao<ChemotherapyCourse, Long> {

    public static final String TABLENAME = "CHEMOTHERAPY_COURSE";

    /**
     * Properties of entity ChemotherapyCourse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property ChemotherapyRecordId = new Property(1, Long.class, "chemotherapyRecordId", false, "CHEMOTHERAPY_RECORD_ID");
        public final static Property StartTime = new Property(2, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, Long.class, "endTime", false, "END_TIME");
        public final static Property EndReason = new Property(4, Integer.class, "endReason", false, "END_REASON");
        public final static Property Status = new Property(5, Integer.class, "status", false, "STATUS");
        public final static Property Times = new Property(6, Integer.class, "times", false, "TIMES");
        public final static Property Description = new Property(7, String.class, "description", false, "DESCRIPTION");
        public final static Property PatientId = new Property(8, String.class, "patientId", false, "PATIENT_ID");
        public final static Property IsActive = new Property(9, Boolean.class, "isActive", false, "IS_ACTIVE");
    };


    public ChemotherapyCourseDao(DaoConfig config) {
        super(config);
    }
    
    public ChemotherapyCourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHEMOTHERAPY_COURSE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"CHEMOTHERAPY_RECORD_ID\" INTEGER," + // 1: chemotherapyRecordId
                "\"START_TIME\" INTEGER," + // 2: startTime
                "\"END_TIME\" INTEGER," + // 3: endTime
                "\"END_REASON\" INTEGER," + // 4: endReason
                "\"STATUS\" INTEGER," + // 5: status
                "\"TIMES\" INTEGER," + // 6: times
                "\"DESCRIPTION\" TEXT," + // 7: description
                "\"PATIENT_ID\" TEXT," + // 8: patientId
                "\"IS_ACTIVE\" INTEGER);"); // 9: isActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHEMOTHERAPY_COURSE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChemotherapyCourse entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long chemotherapyRecordId = entity.getChemotherapyRecordId();
        if (chemotherapyRecordId != null) {
            stmt.bindLong(2, chemotherapyRecordId);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(3, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(4, endTime);
        }
 
        Integer endReason = entity.getEndReason();
        if (endReason != null) {
            stmt.bindLong(5, endReason);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(6, status);
        }
 
        Integer times = entity.getTimes();
        if (times != null) {
            stmt.bindLong(7, times);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(8, description);
        }
 
        String patientId = entity.getPatientId();
        if (patientId != null) {
            stmt.bindString(9, patientId);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(10, isActive ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChemotherapyCourse readEntity(Cursor cursor, int offset) {
        ChemotherapyCourse entity = new ChemotherapyCourse( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // chemotherapyRecordId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // startTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // endTime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // endReason
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // times
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // description
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // patientId
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isActive
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChemotherapyCourse entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setChemotherapyRecordId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEndReason(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTimes(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPatientId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsActive(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChemotherapyCourse entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChemotherapyCourse entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
