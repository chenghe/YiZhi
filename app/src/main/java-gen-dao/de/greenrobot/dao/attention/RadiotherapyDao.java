package de.greenrobot.dao.attention;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.dao.attention.Radiotherapy;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RADIOTHERAPY".
*/
public class RadiotherapyDao extends AbstractDao<Radiotherapy, Long> {

    public static final String TABLENAME = "RADIOTHERAPY";

    /**
     * Properties of entity Radiotherapy.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property StartTime = new Property(1, long.class, "startTime", false, "START_TIME");
        public final static Property ResultType = new Property(2, Integer.class, "resultType", false, "RESULT_TYPE");
        public final static Property PatientId = new Property(3, String.class, "patientId", false, "PATIENT_ID");
        public final static Property PredictDosage = new Property(4, String.class, "predictDosage", false, "PREDICT_DOSAGE");
        public final static Property CurrentCount = new Property(5, String.class, "currentCount", false, "CURRENT_COUNT");
        public final static Property WeeksCount = new Property(6, String.class, "weeksCount", false, "WEEKS_COUNT");
        public final static Property Notes = new Property(7, String.class, "notes", false, "NOTES");
        public final static Property IsActive = new Property(8, Boolean.class, "isActive", false, "IS_ACTIVE");
    };


    public RadiotherapyDao(DaoConfig config) {
        super(config);
    }
    
    public RadiotherapyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RADIOTHERAPY\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"START_TIME\" INTEGER NOT NULL ," + // 1: startTime
                "\"RESULT_TYPE\" INTEGER," + // 2: resultType
                "\"PATIENT_ID\" TEXT," + // 3: patientId
                "\"PREDICT_DOSAGE\" TEXT," + // 4: predictDosage
                "\"CURRENT_COUNT\" TEXT," + // 5: currentCount
                "\"WEEKS_COUNT\" TEXT," + // 6: weeksCount
                "\"NOTES\" TEXT," + // 7: notes
                "\"IS_ACTIVE\" INTEGER);"); // 8: isActive
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RADIOTHERAPY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Radiotherapy entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getStartTime());
 
        Integer resultType = entity.getResultType();
        if (resultType != null) {
            stmt.bindLong(3, resultType);
        }
 
        String patientId = entity.getPatientId();
        if (patientId != null) {
            stmt.bindString(4, patientId);
        }
 
        String predictDosage = entity.getPredictDosage();
        if (predictDosage != null) {
            stmt.bindString(5, predictDosage);
        }
 
        String currentCount = entity.getCurrentCount();
        if (currentCount != null) {
            stmt.bindString(6, currentCount);
        }
 
        String weeksCount = entity.getWeeksCount();
        if (weeksCount != null) {
            stmt.bindString(7, weeksCount);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(8, notes);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(9, isActive ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Radiotherapy readEntity(Cursor cursor, int offset) {
        Radiotherapy entity = new Radiotherapy( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // startTime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // resultType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // patientId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // predictDosage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // currentCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // weeksCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // notes
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // isActive
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Radiotherapy entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setStartTime(cursor.getLong(offset + 1));
        entity.setResultType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPatientId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPredictDosage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrentCount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeeksCount(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNotes(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsActive(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Radiotherapy entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Radiotherapy entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
