package de.greenrobot.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.dao.Indicator;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INDICATOR".
*/
public class IndicatorDao extends AbstractDao<Indicator, Long> {

    public static final String TABLENAME = "INDICATOR";

    /**
     * Properties of entity Indicator.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property UpdateTime = new Property(1, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Status = new Property(2, Integer.class, "status", false, "STATUS");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property PinyinName = new Property(4, String.class, "pinyinName", false, "PINYIN_NAME");
        public final static Property PinyinFullName = new Property(5, String.class, "pinyinFullName", false, "PINYIN_FULL_NAME");
        public final static Property Unit = new Property(6, String.class, "unit", false, "UNIT");
        public final static Property FullName = new Property(7, String.class, "fullName", false, "FULL_NAME");
        public final static Property IsActive = new Property(8, Boolean.class, "isActive", false, "IS_ACTIVE");
        public final static Property IsLandmark = new Property(9, Boolean.class, "isLandmark", false, "IS_LANDMARK");
    };


    public IndicatorDao(DaoConfig config) {
        super(config);
    }
    
    public IndicatorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INDICATOR\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"UPDATE_TIME\" INTEGER," + // 1: updateTime
                "\"STATUS\" INTEGER," + // 2: status
                "\"NAME\" TEXT," + // 3: name
                "\"PINYIN_NAME\" TEXT," + // 4: pinyinName
                "\"PINYIN_FULL_NAME\" TEXT," + // 5: pinyinFullName
                "\"UNIT\" TEXT," + // 6: unit
                "\"FULL_NAME\" TEXT," + // 7: fullName
                "\"IS_ACTIVE\" INTEGER," + // 8: isActive
                "\"IS_LANDMARK\" INTEGER);"); // 9: isLandmark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INDICATOR\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Indicator entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(2, updateTime);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String pinyinName = entity.getPinyinName();
        if (pinyinName != null) {
            stmt.bindString(5, pinyinName);
        }
 
        String pinyinFullName = entity.getPinyinFullName();
        if (pinyinFullName != null) {
            stmt.bindString(6, pinyinFullName);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(7, unit);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(8, fullName);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(9, isActive ? 1L: 0L);
        }
 
        Boolean isLandmark = entity.getIsLandmark();
        if (isLandmark != null) {
            stmt.bindLong(10, isLandmark ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Indicator readEntity(Cursor cursor, int offset) {
        Indicator entity = new Indicator( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pinyinName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pinyinFullName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // unit
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fullName
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isActive
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isLandmark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Indicator entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUpdateTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPinyinName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPinyinFullName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFullName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsActive(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsLandmark(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Indicator entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Indicator entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
